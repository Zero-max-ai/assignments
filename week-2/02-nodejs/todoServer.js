/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  let todo_list = [];
  let counter = 0;

  // getting todo task
  app.get('/todos', (req, res) => {
    if (todo_list.length == 0) return empty_error();
    res.status(200).json({ todo_list: todo_list });
  });

  // getting todo task with id
  app.get('/todos/:id', (req, res) => {
    if(todo_list.length == 0) return empty_error();
    for(let i=0;i<todo_list.length; i++) {
      if (todo_list[i].id == req.params.id) return res.status(200).json({ task: todo_list[i] });
    };
    return res.status(400).json({ msg: 'the task not found!' });
  });

  // creating new todo task
  app.post('/todos', (req, res) => {
    const { title, description } = req.body;
    if (!title || !description ) return empty_error();
    todo_list.push({
      id: counter, title, completed: false, description,
    });
    counter++;
    res.status(201).json({ msg: 'new task added!' });
  });

  // updating the todo task
  app.put('/todos/:id', (req, res) => {
    const {title, completed, description} = req.body;
    if (todo_list.length == 0) return empty_error();
    for(let i=0; i<todo_list.length; i++) {
      if (todo_list[i].id == req.params.id) {
        if (title) todo_list[i].title = title;
        if (description) todo_list[i].description = description;
        if (completed) todo_list[i].completed = completed;
        return res.send(200).json({ msg: 'the fields has been changed!' });
      }
    };
    res.status(400).json({ msg: 'the task id is invalid!' });
  });

  // deleting the todo task
  app.delete('/todos/:id', (req, res) => {
    if (todo_list.length == 0) return empty_error();
    todo_list = todo_list.filter(item => item.id != req.params.id);
    return res.status(200).json({ msg: `the task id: ${req.params.id} deleted successfully` });
  });

  const empty_error = () => { return res.status(400).json({ msg: 'the todo-list is empty!' }); }
  module.exports = app;
